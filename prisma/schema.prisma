generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id        Int      @id @default(autoincrement())

    fullName  String
    email     String
    password  String
    role      UserRole @default(USER)
    verified  DateTime?

    provider  String?
    providerId String?

    cart Cart?
    orders Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name String
    price Float
    imageUrl String
    description String
    thcLevel String


    terpeneId Int
    terpene Terpene @relation(fields: [terpeneId], references: [id])

    typeId Int
    type Type @relation(fields: [typeId], references: [id])

    effects ProductEffect[]


    cartItem CartItem[] 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Effect {
    id Int @id @default(autoincrement())
    name String

    productEffect ProductEffect[]
}

model ProductEffect {
    id Int @id @default(autoincrement())
    value Int

    product Product @relation(fields: [productId], references: [id])
    productId Int

    effect Effect @relation(fields: [effectId], references: [id])
    effectId Int
}

model Terpene {
    id Int @id @default(autoincrement())
    name String

    products Product[]
}

model Type {
    id Int @id @default(autoincrement())
    name String

    products Product[]
}

model Cart {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int? @unique

    token String?

    items CartItem[]

    totalAmount Float @default(0.0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    product Product @relation(fields: [productId], references: [id])
    productId Int

    cart Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Float
    status OrderStatus @default(PENDING)
    paymentId String?

    items Json

    fullName String
    address String
    phone String
    email String
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}